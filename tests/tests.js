function commaFirstStyle () {  var a = "ape"    , b = "bat"    , c = "cat"    , d = "dog"    , e = "elf"    , f = "fly"    , g = "gnu"    , h = "hat"    , i = "ibu"    , j = "joe"    , k = "kit"    , l = "lay"    , m = "man"    , n = "now"    , aPrettyLongVariableName;  a = b + c - d * e / f % g < h > i & j ^ k | l ? m : n;  a = (b + c);  a = {b: c, d: e};  a.b.c();  if (a) return 1, 2, 3, 4;  if (b) return [1, 2, 3, 4];  a(b, c);  a( aPrettyLongVariableName   , "A string, which \"has some useful information"   , "If you put these all together, it'd be too long"   , {a: "is for antelope", b: "is for bat"}   , 42   );  a( aPrettyLongVariableName   , 'A string, which \'has some useful information'   , 'If you put these all together, it\'d be too long'   , {a: 'is for antelope', b: 'is for bat'}   , 42   );  a.b(c.d).e();  a = {b: {c: d, e: f}, c: d};  a = (b + (c / d) * e);  a = [[b, c], [d, e], f];  a = {b: c, d: e};  var zoomThumbHtml = '<a target="_blank" id="zoomThumbnailLink"'                    + '   title="Click to see full-size"'                    + '   href="'                    + Ext.BLANK_IMAGE_URL                    + '">'                    + '<img src="'                    + Ext.BLANK_IMAGE_URL                    + '"';  function test () {    var x;    x.report("test1" + "test2")  };  var foo = {prop: '{baz'}    , bar;  a = {b: c + d + e};  a= {f: function () {        var a = g + h;        return [a, g];      }};  var rv = { a: [b, (c + d), e]           , f: function (g, h) {               var a = g + h;               return [a, g];             }           }    , rv2 = a;  a = (b ? c : d ? e : f);  var x = require("./test/test").something    , y = require('./test2');  something({ value: "data"            , errback: function (code, e) {                var u = new Something(user_data);                u.method( function (data) {                  res.json(data);                }                        , function (data) {                            res.json(data)                          }                        )              }            , callback: function (data) {                res.json()              }            });  res.writeHead(201);  x = (a != b && c != d);  var boolReg = '^(' + boolFields.join('|') + ')$'    , ignoreReg = '^(' + ignoreFields.join('|') + ')$';  foo(a + b, c + d);  a = b | c & d - e * f * g + h & i | j;  a = (b | (c & (d - (e * f * g) + h) & i) | j);  a = b = c = d < e || f > g || h < i && j < k && l > m || n < b;  a = b == c != d === e !== f >= g <= h >= i !== j === k != l == m;  var someKindOfObject = {};  var xyz = someKindOfObject.foo("asdf").bar("bloo").bloo("blerg");  var xyx = someKindOfObject.foo("asdf").bar("bloo");  someKindOfObject.doSomething().doSomethingElse().yetAnotherSomething();  return 1;};